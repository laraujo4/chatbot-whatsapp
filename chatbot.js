const qrcode = require('qrcode');
const express = require('express');
const { Client, Buttons, List, MessageMedia, LocalAuth } = require('whatsapp-web.js');
const app = express();
const port = process.env.PORT || 3000;

let qrCodeData = '';
const clientesAvisadosForaDoHorario = new Set(); // <- Adicionado

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        args: ['--no-sandbox'],
    },
});

// Simula digita√ß√£o com atraso
const delay = ms => new Promise(res => setTimeout(res, ms));

// --- LIMPA A LISTA √Ä MEIA-NOITE ---
function agendarLimpezaDiaria() {
    const agora = new Date();
    const proximaMeiaNoite = new Date();
    proximaMeiaNoite.setHours(24, 0, 0, 0); // Pr√≥xima 00:00
    const tempoAteMeiaNoite = proximaMeiaNoite - agora;

    setTimeout(() => {
        clientesAvisadosForaDoHorario.clear();
        console.log('üßπ Lista de clientes fora do hor√°rio limpa!');
        setInterval(() => {
            clientesAvisadosForaDoHorario.clear();
            console.log('üßπ Lista de clientes fora do hor√°rio limpa automaticamente (di√°ria)');
        }, 24 * 60 * 60 * 1000); // A cada 24h
    }, tempoAteMeiaNoite);
}
agendarLimpezaDiaria(); // <- Adicionado

// --- ROTAS EXPRESS ---
app.get('/', (req, res) => {
    res.send('‚úÖ Bot rodando! Acesse <a href="/qrcode">/qrcode</a> para escanear o QR');
});

app.get('/qrcode', async (req, res) => {
    if (!qrCodeData) return res.send('‚è≥ QR Code ainda n√£o gerado. Aguarde...');
    const qrImage = await qrcode.toDataURL(qrCodeData);
    res.send(`<h2>Escaneie com o WhatsApp:</h2><img src="${qrImage}">`);
});

// --- EVENTOS WHATSAPP ---
client.on('qr', qr => {
    qrCodeData = qr;
    console.log('‚ö†Ô∏è Novo QR Code gerado! Acesse /qrcode para escanear.');
});

client.on('ready', () => {
    console.log('‚úÖ WhatsApp conectado!');
});

client.on('message', async msg => {
    try {
        const from = msg.from;
        if (!from.endsWith('@c.us')) return;

        const chat = await msg.getChat();

        // Fora do hor√°rio, com controle por n√∫mero
        if (foraDoHorario()) {
            if (!clientesAvisadosForaDoHorario.has(from)) {
                await client.sendMessage(from, 'üïí Nosso hor√°rio de atendimento √© das 7h √†s 20h. Deixe sua mensagem e responderemos em breve!');
                clientesAvisadosForaDoHorario.add(from);
            }
            return;
        }

        // Sauda√ß√£o
        if (/^(menu|teste|dia|tarde|bom|boa|boa noite|boa tarde|bom dia|noite|oi|ol√°|ola|oi bom dia|oi, bom dia|ol√° bom dia|ol√°, bom dia|oi boa tarde|oi, boa tarde|ol√° boa tarde|ol√°, boa tarde|oi boa noite|oi, boa noite|ol√° boa noite|ol√°, boa noite)$/i.test(msg.body)) {
            const contact = await msg.getContact();
            const name = contact.pushname || 'amigo';
            const firstName = name.split(' ')[0];

            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);

            await client.sendMessage(from,
                'Ol√°, ' + firstName + '! Seja bem-vindo √† *Pamonha e Cia* üåΩ\n' +
                'Sou seu assistente virtual!\n\n' +
                'Por favor, escolha uma op√ß√£o:\n\n' +
                '1Ô∏è‚É£ Fazer um pedido\n' +
                '2Ô∏è‚É£ Encomendar saco de milho\n' +
                '3Ô∏è‚É£ Falar com um atendente'
            );
            return;
        }

        // Op√ß√£o 1
        if (msg.body === '1') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);

            await client.sendMessage(from, 'üõµ Entregamos nossos produtos fresquinhos em todo o *Guaruj√°*!');
            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);

            await client.sendMessage(from,
                'üìã Aqui est√° o nosso card√°pio!\n\nPor favor, envie seu *endere√ßo (rua, n√∫mero e bairro)*.\n\nüí≥ Aceitamos *Pix* e *d√©bito*!'
            );

            const media = MessageMedia.fromFilePath('./Card√°pio Quiosque.jpg');
            await client.sendMessage(from, media, { caption: 'üìã Card√°pio' });
            return;
        }

        // Op√ß√£o 2
        if (msg.body === '2') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);

            await client.sendMessage(from,
                'üåΩ Quantos *sacos de milho* voc√™ deseja encomendar?\n\nPor favor, envie:\n' +
                'üìç Endere√ßo (rua, n√∫mero, bairro e cidade)\n' +
                'üöö E o *dia desejado para entrega*'
            );
            return;
        }

        // Op√ß√£o 3
        if (msg.body === '3') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);

            await client.sendMessage(from,
                'üë§ Beleza!\nUm *atendente* vai te chamar em instantes.\n\nEnquanto isso, fique √† vontade para enviar d√∫vidas ou pedidos üòä'
            );
            return;
        }

    } catch (err) {
        console.error('‚ùå Erro no processamento da mensagem:', err);
    }
});

// --- HOR√ÅRIO DE FUNCIONAMENTO ---
const foraDoHorario = () => {
    const agora = new Date();
    const horaUTC = agora.getUTCHours();
    const horaBrasilia = (horaUTC - 3 + 24) % 24; // GMT-3
    return (horaBrasilia < 7 || horaBrasilia >= 20);
};

// --- INICIALIZA√á√ÉO ---
client.initialize();

app.listen(port, () => {
    console.log(`üåê Servidor Express rodando na porta ${port}`);
});
